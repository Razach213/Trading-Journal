rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // CRITICAL: Admin email check function - ONLY these emails have admin access
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email in [
               'thealiraza22@gmail.com',
               'ramdanmubarak10@gmail.com'
             ];
    }
    
    // CRITICAL: Super admin check for highest level operations
    function isSuperAdmin() {
      return request.auth != null && 
             request.auth.token.email == 'thealiraza22@gmail.com';
    }
    
    function isValidUser(data) {
      return data.keys().hasAll(['email', 'displayName', 'plan', 'createdAt']) &&
             data.email is string &&
             data.displayName is string &&
             data.plan in ['free', 'pro', 'premium'] &&
             data.createdAt is timestamp;
    }
    
    function isValidTrade(data) {
      return data.keys().hasAll(['userId', 'symbol', 'type', 'entryPrice', 'quantity', 'entryDate', 'status', 'createdAt']) &&
             data.userId is string &&
             data.symbol is string &&
             data.type in ['long', 'short'] &&
             data.entryPrice is number &&
             data.quantity is number &&
             data.entryDate is timestamp &&
             data.status in ['open', 'closed'] &&
             data.createdAt is timestamp &&
             data.entryPrice > 0 &&
             data.quantity > 0;
    }
    
    function isValidTradeUpdate(data) {
      return !data.diff(resource.data).affectedKeys().hasAny(['userId', 'createdAt']);
    }
    
    function isValidAccountBalance(data) {
      return data.keys().hasAll(['userId', 'startingBalance', 'currentBalance', 'totalPnL', 'totalReturnPercent', 'lastUpdated']) &&
             data.userId is string &&
             data.startingBalance is number &&
             data.currentBalance is number &&
             data.totalPnL is number &&
             data.totalReturnPercent is number &&
             data.lastUpdated is timestamp &&
             data.startingBalance > 0;
    }
    
    // ========================================
    // USER DATA COLLECTIONS
    // ========================================
    
    // Users collection rules - Admins can read/modify all users
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      allow create: if isAuthenticated() && 
                   isOwner(userId) && 
                   isValidUser(request.resource.data);
      
      allow update: if isAuthenticated() && 
                   (isOwner(userId) || isAdmin()) && 
                   isValidUser(request.resource.data) &&
                   !request.resource.data.diff(resource.data).affectedKeys().hasAny(['createdAt']);
      
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      // User's trading statistics (read-only for users, writable by functions and admins)
      match /stats/{statId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow write: if request.auth == null || isAdmin(); // Allow Admin SDK operations and admin users
      }
    }
    
    // Account Balances collection - Admins can read/modify all balances
    match /accountBalances/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      allow create: if isAuthenticated() && 
                   (isOwner(userId) || isAdmin()) &&
                   isValidAccountBalance(request.resource.data);
      
      allow update: if isAuthenticated() && 
                   (isOwner(userId) || isAdmin()) &&
                   isValidAccountBalance(request.resource.data) &&
                   !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId']);
      
      allow delete: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Trades collection rules - Admins can read/modify all trades
    match /trades/{tradeId} {
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.userId || isAdmin());
      
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin()) &&
                   isValidTrade(request.resource.data);
      
      allow update: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || isAdmin()) &&
                   isValidTrade(request.resource.data) &&
                   isValidTradeUpdate(request.resource.data);
      
      allow delete: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Playbooks collection rules - Admins can read/modify all playbooks
    match /playbooks/{playbookId} {
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.userId || isAdmin() || resource.data.isPublic == true);
      
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin());
      
      allow update: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || isAdmin());
      
      allow delete: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Subscriptions collection (managed by Stripe webhooks and admins)
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
                 (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAdmin(); // Only admins and Cloud Functions can manage subscriptions
    }
    
    // ========================================
    // ADMIN-ONLY COLLECTIONS - STRICT ACCESS CONTROL
    // ========================================
    
    // Admin analytics data - ONLY admins can access
    match /admin/analytics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin system metrics - ONLY admins can access
    match /admin/system/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin revenue data - ONLY admins can access
    match /admin/revenue/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin security logs - ONLY admins can access
    match /admin/security/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin user management logs - ONLY admins can access
    match /admin/users/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin configuration - ONLY super admin can modify
    match /admin/config/{document=**} {
      allow read: if isAdmin();
      allow write: if isSuperAdmin();
    }
    
    // Admin audit logs - ONLY admins can access
    match /admin/logs/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin exports - ONLY admins can access
    match /admin/exports/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin backups - ONLY super admin can access
    match /admin/backups/{document=**} {
      allow read, write: if isSuperAdmin();
    }
    
    // ========================================
    // ADMIN PANEL SPECIFIC COLLECTIONS
    // ========================================
    
    // System health monitoring - ONLY admins can access
    match /systemHealth/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Performance metrics - ONLY admins can access
    match /performanceMetrics/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Security events - ONLY admins can access
    match /securityEvents/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Revenue tracking - ONLY admins can access
    match /revenueTracking/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // User activity logs - ONLY admins can access
    match /userActivity/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Admin notifications - ONLY admins can access
    match /adminNotifications/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // System configuration - ONLY super admin can modify
    match /systemConfig/{document=**} {
      allow read: if isAdmin();
      allow write: if isSuperAdmin();
    }
    
    // Backup and restore logs - ONLY super admin can access
    match /backupLogs/{document=**} {
      allow read, write: if isSuperAdmin();
    }
    
    // Admin session tracking - ONLY admins can access
    match /adminSessions/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Failed login attempts tracking - ONLY admins can access
    match /failedLogins/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // System alerts - ONLY admins can access
    match /systemAlerts/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Database statistics - ONLY admins can access
    match /databaseStats/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // ========================================
    // PUBLIC AND GENERAL COLLECTIONS
    // ========================================
    
    // Public data (app configuration, pricing, etc.)
    match /public/{document=**} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can write public data
    }
    
    // Analytics collection (aggregated data) - Admins can read all
    match /analytics/{document=**} {
      allow read: if isAuthenticated() || isAdmin();
      allow write: if isAdmin(); // Only admins and Cloud Functions can write analytics
    }
    
    // Feedback and support tickets - Admins can read all
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin());
    }
    
    // User preferences and settings
    match /userPreferences/{userId} {
      allow read, write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    // Trading strategies (user-defined) - Admins can read all
    match /strategies/{strategyId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin());
    }
    
    // Trading tags (user-defined) - Admins can read all
    match /tags/{tagId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin());
    }
    
    // ========================================
    // SECURITY AUDIT COLLECTIONS
    // ========================================
    
    // Security audit trail - ONLY admins can access
    match /securityAudit/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Data access logs - ONLY admins can access
    match /dataAccessLogs/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Permission changes log - ONLY super admin can access
    match /permissionChanges/{document=**} {
      allow read, write: if isSuperAdmin();
    }
  }
}