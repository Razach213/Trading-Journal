rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // CRITICAL: Admin email check function - Updated for admin panel access
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email in [
               'thealiraza22@gmail.com',
               'ramdanmubarak10@gmail.com'
             ];
    }
    
    // CRITICAL: Simplified permission check - Remove redundant checks
    function canAccess(userId) {
      return isAuthenticated() && (isOwner(userId) || isAdmin());
    }
    
    function isValidUser(data) {
      return data.keys().hasAll(['email', 'displayName', 'plan']) &&
             data.email is string &&
             data.displayName is string &&
             data.plan in ['free', 'pro'];
    }
    
    function isValidTrade(data) {
      return data.keys().hasAll(['userId', 'symbol', 'type', 'entryPrice', 'quantity', 'entryDate', 'status']) &&
             data.userId is string &&
             data.symbol is string &&
             data.type in ['long', 'short'] &&
             data.entryPrice is number &&
             data.quantity is number &&
             data.entryDate is timestamp &&
             data.status in ['open', 'closed'] &&
             data.entryPrice > 0 &&
             data.quantity > 0 &&
             (!data.keys().hasAny(['exitPrice']) || data.exitPrice == null || data.exitPrice is number) &&
             (!data.keys().hasAny(['exitDate']) || data.exitDate == null || data.exitDate is timestamp) &&
             (!data.keys().hasAny(['pnl']) || data.pnl == null || data.pnl is number) &&
             (!data.keys().hasAny(['pnlPercent']) || data.pnlPercent == null || data.pnlPercent is number) &&
             (!data.keys().hasAny(['notes']) || data.notes == null || data.notes is string) &&
             (!data.keys().hasAny(['strategy']) || data.strategy == null || data.strategy is string) &&
             (!data.keys().hasAny(['tags']) || data.tags is list) &&
             (!data.keys().hasAny(['balanceAfterTrade']) || data.balanceAfterTrade == null || data.balanceAfterTrade is number);
    }
    
    function isValidTradeUpdate(data) {
      return !data.diff(resource.data).affectedKeys().hasAny(['userId']);
    }
    
    function isValidAccountBalance(data) {
      return data.keys().hasAll(['userId', 'startingBalance', 'currentBalance', 'totalPnL', 'totalReturnPercent', 'lastUpdated']) &&
             data.userId is string &&
             data.startingBalance is number &&
             data.currentBalance is number &&
             data.totalPnL is number &&
             data.totalReturnPercent is number &&
             data.lastUpdated is timestamp &&
             data.startingBalance >= 0;
    }
    
    // Users collection rules - Simplified permissions
    match /users/{userId} {
      allow read: if canAccess(userId);
      
      allow create: if isAuthenticated() && 
                   isOwner(userId) && 
                   isValidUser(request.resource.data);
      
      allow update: if canAccess(userId) && 
                   isValidUser(request.resource.data);
      
      allow delete: if canAccess(userId);
      
      // User's trading statistics (read-only for users, writable by functions and admins)
      match /stats/{statId} {
        allow read: if canAccess(userId);
        allow write: if request.auth == null || isAdmin(); // Allow Admin SDK operations and admin users
      }
    }
    
    // Account Balances collection - Simplified permissions
    match /accountBalances/{userId} {
      allow read: if canAccess(userId);
      
      allow create: if canAccess(userId) &&
                   isValidAccountBalance(request.resource.data);
      
      allow update: if canAccess(userId) &&
                   isValidAccountBalance(request.resource.data) &&
                   !request.resource.data.diff(resource.data).affectedKeys().hasAny(['userId']);
      
      allow delete: if canAccess(userId);
    }
    
    // Trades collection rules - Simplified permissions
    match /trades/{tradeId} {
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.userId || isAdmin());
      
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin()) &&
                   isValidTrade(request.resource.data);
      
      allow update: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || isAdmin()) &&
                   isValidTradeUpdate(request.resource.data);
      
      allow delete: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Payments collection - Simplified permissions
    match /payments/{paymentId} {
      // Allow users to read their own payments and admins to read all
      allow read: if isAuthenticated() && 
                 (isOwner(resource.data.userId) || isAdmin());
      
      // Allow users to create payments
      allow create: if isAuthenticated() && 
                   isOwner(request.resource.data.userId);
      
      // Allow admins to update payment status
      allow update: if isAuthenticated() && (
                     // User can update their own payment if not changing status, reviewedAt, reviewedBy, or adminNotes
                     (isOwner(resource.data.userId) && 
                      !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'reviewedAt', 'reviewedBy', 'adminNotes'])) ||
                     // Admins can update any payment including status changes
                     isAdmin()
                   );
      
      // Only admins can delete payments
      allow delete: if isAuthenticated() && isAdmin();
    }
    
    // Playbooks collection rules - Simplified permissions
    match /playbooks/{playbookId} {
      allow read: if isAuthenticated() && 
                 (request.auth.uid == resource.data.userId || isAdmin() || resource.data.isPublic == true);
      
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin());
      
      allow update: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || isAdmin());
      
      allow delete: if isAuthenticated() && 
                   (request.auth.uid == resource.data.userId || isAdmin());
    }
    
    // Subscriptions collection (managed by Stripe webhooks and admins)
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
                 (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAdmin(); // Only admins and Cloud Functions can manage subscriptions
    }
    
    // Public data (app configuration, pricing, etc.)
    match /public/{document=**} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can write public data
    }
    
    // Feedback and support tickets - Simplified permissions
    match /feedback/{feedbackId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin());
    }
    
    // User preferences and settings - Simplified permissions
    match /userPreferences/{userId} {
      allow read, write: if canAccess(userId);
    }
    
    // Trading strategies (user-defined) - Simplified permissions
    match /strategies/{strategyId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin());
    }
    
    // Trading tags (user-defined) - Simplified permissions
    match /tags/{tagId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && 
                   (isOwner(request.resource.data.userId) || isAdmin());
    }
  }
}